#!/usr/bin/env node

/**
 * Enhanced Universal Prompt Generator Demo
 * Showcases performance monitoring, caching, and parallel processing
 */

import { UniversalPromptGenerator } from './src/index.js';
import { Logger } from './src/utils/Logger.js';
import chalk from 'chalk';
import fs from 'fs-extra';
import path from 'path';

const logger = new Logger('EnhancedDemo');

async function runEnhancedDemo() {
  console.log(chalk.blue.bold('\n🚀 Enhanced Universal Prompt Generator Demo\n'));
  console.log(chalk.cyan('Features: Performance Monitoring + Caching + Parallel Processing\n'));

  try {
    // Initialize the generator with enhanced features
    console.log(chalk.yellow('Initializing generator with enhanced features...'));
    const generator = new UniversalPromptGenerator({
      enablePerformanceMonitoring: true,
      enableCaching: true,
      enableParallelProcessing: true,
      cacheOptions: {
        maxSize: 200 * 1024 * 1024, // 200MB for demo
        ttl: 60 * 60 * 1000, // 1 hour
        persistToDisk: true
      },
      parallelOptions: {
        maxWorkers: 4,
        taskTimeout: 45000,
        enableBatching: true,
        batchSize: 3
      }
    });\n    await generator.initialize();\n    console.log(chalk.green('✅ Enhanced generator initialized successfully\\n'));\n\n    // Show system capabilities\n    displaySystemCapabilities(generator);\n\n    // Demo 1: Performance Baseline\n    await demoPerformanceBaseline(generator);\n\n    // Demo 2: Caching Benefits\n    await demoCachingBenefits(generator);\n\n    // Demo 3: Parallel Processing\n    await demoParallelProcessing(generator);\n\n    // Demo 4: Performance Monitoring\n    await demoPerformanceMonitoring(generator);\n\n    // Demo 5: System Statistics\n    displaySystemStatistics(generator);\n\n    // Cleanup\n    await generator.shutdown();\n\n    console.log(chalk.green.bold('\\n🎉 Enhanced demo completed successfully!'));\n    console.log(chalk.blue('Check the ./metrics/ and ./cache/ directories for performance data.'));\n\n  } catch (error) {\n    console.error(chalk.red('Enhanced demo failed:'), error.message);\n    if (process.env.DEBUG) {\n      console.error(error.stack);\n    }\n    process.exit(1);\n  }\n}\n\nfunction displaySystemCapabilities(generator) {\n  console.log(chalk.magenta.bold('📊 System Capabilities:'));\n  console.log(chalk.cyan(`  Performance Monitoring: ${generator.options.enablePerformanceMonitoring ? '✅ Enabled' : '❌ Disabled'}`));\n  console.log(chalk.cyan(`  Intelligent Caching: ${generator.options.enableCaching ? '✅ Enabled' : '❌ Disabled'}`));\n  console.log(chalk.cyan(`  Parallel Processing: ${generator.options.enableParallelProcessing ? '✅ Enabled' : '❌ Disabled'}`));\n  console.log(chalk.cyan(`  Max Workers: ${generator.options.parallelOptions.maxWorkers}`));\n  console.log(chalk.cyan(`  Cache Size: ${Math.round(generator.options.cacheOptions.maxSize / 1024 / 1024)}MB`));\n  console.log();\n}\n\nasync function demoPerformanceBaseline(generator) {\n  console.log(chalk.magenta.bold('⚡ Demo 1: Performance Baseline\\n'));\n\n  const inputs = {\n    category: 'web-app',\n    projectName: 'Performance Test App',\n    techStack: ['React', 'TypeScript', 'Node.js'],\n    targetAudience: 'Performance enthusiasts',\n    deploymentTarget: 'Vercel',\n    featureFlags: ['performance-monitoring', 'caching', 'parallel-processing']\n  };\n\n  console.log(chalk.gray('Generating baseline performance metrics...'));\n  \n  const startTime = Date.now();\n  const promptSuite = await generator.generatePromptSuite(inputs);\n  const duration = Date.now() - startTime;\n\n  console.log(chalk.green(`✅ Baseline completed in ${duration}ms`));\n  console.log(chalk.green(`   Files Generated: ${promptSuite.fileCount}`));\n  console.log(chalk.green(`   Total Size: ${formatBytes(promptSuite.totalSize)}`));\n  console.log(chalk.green(`   Quality Score: ${promptSuite.validation?.quality?.score || 'N/A'}%`));\n  console.log();\n\n  return { duration, promptSuite };\n}\n\nasync function demoCachingBenefits(generator) {\n  console.log(chalk.magenta.bold('🧠 Demo 2: Caching Benefits\\n'));\n\n  const inputs = {\n    category: 'rest-api',\n    projectName: 'Cached API Service',\n    techStack: ['Node.js', 'Express', 'MongoDB'],\n    targetAudience: 'API developers',\n    deploymentTarget: 'AWS',\n    featureFlags: ['authentication', 'caching', 'monitoring']\n  };\n\n  console.log(chalk.gray('First generation (cold cache)...'));\n  const coldStart = Date.now();\n  await generator.generatePromptSuite(inputs);\n  const coldDuration = Date.now() - coldStart;\n\n  console.log(chalk.gray('Second generation (warm cache)...'));\n  const warmStart = Date.now();\n  await generator.generatePromptSuite(inputs);\n  const warmDuration = Date.now() - warmStart;\n\n  const speedup = Math.round((coldDuration / warmDuration) * 100) / 100;\n  const improvement = Math.round(((coldDuration - warmDuration) / coldDuration) * 100);\n\n  console.log(chalk.green(`✅ Cache performance analysis:`));\n  console.log(chalk.green(`   Cold start: ${coldDuration}ms`));\n  console.log(chalk.green(`   Warm cache: ${warmDuration}ms`));\n  console.log(chalk.green(`   Speedup: ${speedup}x faster`));\n  console.log(chalk.green(`   Improvement: ${improvement}% faster`));\n  console.log();\n\n  return { coldDuration, warmDuration, speedup };\n}\n\nasync function demoParallelProcessing(generator) {\n  console.log(chalk.magenta.bold('⚡ Demo 3: Parallel Processing\\n'));\n\n  const multipleInputs = [\n    {\n      category: 'landing-page',\n      projectName: 'Parallel Landing 1',\n      techStack: ['HTML5', 'CSS3', 'JavaScript'],\n      targetAudience: 'Marketing teams'\n    },\n    {\n      category: 'mobile-app',\n      projectName: 'Parallel Mobile 2',\n      techStack: ['React Native', 'TypeScript'],\n      targetAudience: 'Mobile users'\n    },\n    {\n      category: 'web-game',\n      projectName: 'Parallel Game 3',\n      techStack: ['Phaser.js', 'WebGL'],\n      targetAudience: 'Gamers'\n    }\n  ];\n\n  console.log(chalk.gray('Sequential processing...'));\n  const sequentialStart = Date.now();\n  const sequentialResults = [];\n  for (const input of multipleInputs) {\n    const result = await generator.generatePromptSuite(input);\n    sequentialResults.push(result);\n  }\n  const sequentialDuration = Date.now() - sequentialStart;\n\n  console.log(chalk.gray('Parallel processing...'));\n  const parallelStart = Date.now();\n  const parallelPromises = multipleInputs.map(input => \n    generator.generatePromptSuite(input)\n  );\n  const parallelResults = await Promise.all(parallelPromises);\n  const parallelDuration = Date.now() - parallelStart;\n\n  const parallelSpeedup = Math.round((sequentialDuration / parallelDuration) * 100) / 100;\n  const parallelImprovement = Math.round(((sequentialDuration - parallelDuration) / sequentialDuration) * 100);\n\n  console.log(chalk.green(`✅ Parallel processing analysis:`));\n  console.log(chalk.green(`   Sequential: ${sequentialDuration}ms`));\n  console.log(chalk.green(`   Parallel: ${parallelDuration}ms`));\n  console.log(chalk.green(`   Speedup: ${parallelSpeedup}x faster`));\n  console.log(chalk.green(`   Improvement: ${parallelImprovement}% faster`));\n  console.log(chalk.green(`   Total Files: ${parallelResults.reduce((sum, r) => sum + r.fileCount, 0)}`));\n  console.log();\n\n  return { sequentialDuration, parallelDuration, parallelSpeedup };\n}\n\nasync function demoPerformanceMonitoring(generator) {\n  console.log(chalk.magenta.bold('📊 Demo 4: Performance Monitoring\\n'));\n\n  const inputs = {\n    category: 'microservices',\n    projectName: 'Monitored Microservice',\n    techStack: ['Node.js', 'Docker', 'Kubernetes'],\n    targetAudience: 'DevOps engineers',\n    deploymentTarget: 'Kubernetes',\n    featureFlags: ['monitoring', 'metrics', 'alerting']\n  };\n\n  console.log(chalk.gray('Generating with detailed performance monitoring...'));\n  \n  const result = await generator.generatePromptSuite(inputs);\n  const performanceReport = generator.generatePerformanceReport();\n\n  console.log(chalk.green(`✅ Performance monitoring results:`));\n  console.log(chalk.green(`   Files Generated: ${result.fileCount}`));\n  console.log(chalk.green(`   Quality Score: ${result.validation?.quality?.score || 'N/A'}%`));\n  \n  if (performanceReport && performanceReport.system) {\n    console.log(chalk.green(`   Memory Usage: ${formatBytes(performanceReport.system.memory.heapUsed)}`));\n    console.log(chalk.green(`   Active Sessions: ${performanceReport.system.activeSessions}`));\n  }\n  \n  console.log();\n\n  return result;\n}\n\nfunction displaySystemStatistics(generator) {\n  console.log(chalk.magenta.bold('📈 System Statistics:\\n'));\n\n  const stats = generator.getPerformanceStats();\n\n  if (stats.cache) {\n    console.log(chalk.cyan('Cache Statistics:'));\n    console.log(chalk.gray(`  Hit Rate: ${Math.round(stats.cache.hitRate)}%`));\n    console.log(chalk.gray(`  Total Entries: ${stats.cache.totalEntries}`));\n    console.log(chalk.gray(`  Memory Usage: ${formatBytes(stats.cache.memoryUsage)}`));\n    console.log(chalk.gray(`  Disk Reads: ${stats.cache.diskReads}`));\n    console.log(chalk.gray(`  Disk Writes: ${stats.cache.diskWrites}`));\n    console.log();\n  }\n\n  if (stats.parallel) {\n    console.log(chalk.cyan('Parallel Processing Statistics:'));\n    console.log(chalk.gray(`  Active Workers: ${stats.parallel.activeWorkers}`));\n    console.log(chalk.gray(`  Tasks Completed: ${stats.parallel.tasksCompleted}`));\n    console.log(chalk.gray(`  Success Rate: ${Math.round(stats.parallel.successRate)}%`));\n    console.log(chalk.gray(`  Average Task Time: ${Math.round(stats.parallel.averageTaskTime)}ms`));\n    console.log();\n  }\n\n  if (stats.performance) {\n    console.log(chalk.cyan('Performance Metrics:'));\n    console.log(chalk.gray(`  Memory (RSS): ${formatBytes(stats.performance.memory.rss)}`));\n    console.log(chalk.gray(`  Heap Used: ${formatBytes(stats.performance.memory.heapUsed)}`));\n    console.log(chalk.gray(`  Uptime: ${Math.round(stats.performance.uptime)}s`));\n    console.log();\n  }\n}\n\nfunction formatBytes(bytes, decimals = 2) {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n// Handle CLI arguments\nconst args = process.argv.slice(2);\nif (args.includes('--help') || args.includes('-h')) {\n  console.log(chalk.blue.bold('Enhanced Universal Prompt Generator Demo\\n'));\n  console.log('Usage: node enhanced-demo.js [options]\\n');\n  console.log('Options:');\n  console.log('  --help, -h     Show this help message');\n  console.log('  --debug        Enable debug output');\n  console.log('  --no-cache     Disable caching');\n  console.log('  --no-parallel  Disable parallel processing');\n  console.log('\\nThis demo showcases enhanced performance features.');\n  process.exit(0);\n}\n\nif (args.includes('--debug')) {\n  process.env.DEBUG = 'true';\n  process.env.LOG_LEVEL = 'debug';\n}\n\n// Run the enhanced demo\nrunEnhancedDemo();