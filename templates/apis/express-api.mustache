{{!-- @title: Express REST API Template --}}
{{!-- @description: Complete Express.js REST API with authentication and database --}}
{{!-- @category: rest-api --}}
{{!-- @techStack: Node.js, Express --}}
{{!-- @outputPath: src/app.js --}}

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
{{#utils.includes techStack 'MongoDB'}}
const mongoose = require('mongoose');
{{/utils.includes}}
{{#utils.includes techStack 'PostgreSQL'}}
const { Pool } = require('pg');
{{/utils.includes}}
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);

// Logging
app.use(morgan('combined'));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

{{#utils.includes techStack 'MongoDB'}}
// MongoDB connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/{{utils.kebabCase projectName}}', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));
{{/utils.includes}}

{{#utils.includes techStack 'PostgreSQL'}}
// PostgreSQL connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

pool.on('connect', () => {
  console.log('Connected to PostgreSQL database');
});

pool.on('error', (err) => {
  console.error('PostgreSQL connection error:', err);
});
{{/utils.includes}}

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    service: '{{projectName}} API',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// API Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/users', require('./routes/users'));
app.use('/api/{{utils.pluralize (utils.camelCase projectName)}}', require('./routes/{{utils.kebabCase projectName}}'));

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'Welcome to {{projectName}} API',
    version: '1.0.0',
    description: 'Generated with Qoder Universal Prompt Generator',
    category: '{{category}}',
    techStack: [{{#techStack}}'{{.}}'{{#unless @last}}, {{/unless}}{{/techStack}}],
    targetAudience: '{{targetAudience}}',
    deploymentTarget: '{{deploymentTarget}}',
    endpoints: {
      health: '/health',
      auth: '/api/auth',
      users: '/api/users',
      resources: '/api/{{utils.pluralize (utils.camelCase projectName)}}'
    },
    documentation: '/api/docs'
  });
});

// API Documentation endpoint
app.get('/api/docs', (req, res) => {
  res.json({
    openapi: '3.0.0',
    info: {
      title: '{{projectName}} API',
      version: '1.0.0',
      description: 'API documentation for {{projectName}}'
    },
    servers: [
      {
        url: `http://localhost:${PORT}`,
        description: 'Development server'
      }
    ],
    paths: {
      '/health': {
        get: {
          summary: 'Health check',
          responses: {
            '200': {
              description: 'Service is healthy'
            }
          }
        }
      },
      '/api/auth/login': {
        post: {
          summary: 'User login',
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    email: { type: 'string' },
                    password: { type: 'string' }
                  },
                  required: ['email', 'password']
                }
              }
            }
          },
          responses: {
            '200': {
              description: 'Login successful'
            },
            '401': {
              description: 'Invalid credentials'
            }
          }
        }
      },
      '/api/users': {
        get: {
          summary: 'Get all users',
          security: [{ bearerAuth: [] }],
          responses: {
            '200': {
              description: 'List of users'
            }
          }
        },
        post: {
          summary: 'Create new user',
          requestBody: {
            required: true,
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    name: { type: 'string' },
                    email: { type: 'string' },
                    password: { type: 'string' }
                  },
                  required: ['name', 'email', 'password']
                }
              }
            }
          },
          responses: {
            '201': {
              description: 'User created successfully'
            },
            '400': {
              description: 'Validation error'
            }
          }
        }
      }
    },
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT'
        }
      }
    }
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Not Found',
    message: `Route ${req.originalUrl} not found`,
    availableEndpoints: [
      'GET /',
      'GET /health',
      'GET /api/docs',
      'POST /api/auth/login',
      'POST /api/auth/register',
      'GET /api/users',
      'POST /api/users'
    ]
  });
});

// Global error handler
app.use((err, req, res, next) => {
  console.error('Error:', err);
  
  const error = {
    message: err.message || 'Internal Server Error',
    status: err.status || 500
  };

  if (process.env.NODE_ENV === 'development') {
    error.stack = err.stack;
    error.details = err;
  }

  res.status(error.status).json({ error });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  {{#utils.includes techStack 'MongoDB'}}
  mongoose.connection.close();
  {{/utils.includes}}
  {{#utils.includes techStack 'PostgreSQL'}}
  pool.end();
  {{/utils.includes}}
  process.exit(0);
});

// Start server
const server = app.listen(PORT, () => {
  console.log(`{{projectName}} API server running on port ${PORT}`);
  console.log(`Health check: http://localhost:${PORT}/health`);
  console.log(`API documentation: http://localhost:${PORT}/api/docs`);
  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
});

module.exports = { app, server };