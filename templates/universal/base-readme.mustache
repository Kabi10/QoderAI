{{!-- @title: Base README Template --}}
{{!-- @description: Universal README template for all project types --}}
{{!-- @category: universal --}}
{{!-- @outputPath: README.md --}}

# {{projectName}}

{{#description}}{{description}}{{/description}}{{^description}}A {{category}} project generated with Qoder's Universal Prompt Generator.{{/description}}

## Overview

This project was generated using the Qoder Universal Prompt Generator for the **{{category}}** category. It includes a complete, production-ready setup with modern development practices and tools.

### Key Features

{{#featureFlags}}
- âœ… {{.}}
{{/featureFlags}}
{{^featureFlags}}
- ðŸš€ Modern architecture and best practices
- ðŸ”§ Complete development environment setup
- ðŸ“± Responsive design (for web applications)
- ðŸ”’ Security-first approach
- ðŸ“Š Built-in monitoring and analytics
- ðŸ§ª Comprehensive testing suite
{{/featureFlags}}

### Technology Stack

{{#techStack}}
- **{{.}}**
{{/techStack}}
{{^techStack}}
- Modern technology stack optimized for {{category}} development
{{/techStack}}

### Target Audience

**{{targetAudience}}**

### Deployment Target

**{{deploymentTarget}}**

## Quick Start

### Prerequisites

{{#hasNodeJs}}
- Node.js 18+ and npm/yarn
{{/hasNodeJs}}
{{#hasPython}}
- Python 3.8+ and pip
{{/hasPython}}
{{#hasJava}}
- Java 11+ and Maven/Gradle
{{/hasJava}}
{{#hasDocker}}
- Docker and Docker Compose
{{/hasDocker}}

### Installation

1. **Clone the repository** (if using git)
   ```bash
   git clone <repository-url>
   cd {{projectName}}
   ```

2. **Install dependencies**
   {{#hasNodeJs}}
   ```bash
   npm install
   # or
   yarn install
   ```
   {{/hasNodeJs}}
   {{#hasPython}}
   ```bash
   pip install -r requirements.txt
   # or with virtual environment
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   pip install -r requirements.txt
   ```
   {{/hasPython}}

3. **Configure environment**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

4. **Start development server**
   {{#hasReact}}
   ```bash
   npm start
   ```
   {{/hasReact}}
   {{#hasVue}}
   ```bash
   npm run serve
   ```
   {{/hasVue}}
   {{#hasAngular}}
   ```bash
   ng serve
   ```
   {{/hasAngular}}
   {{#hasExpress}}
   ```bash
   npm run dev
   ```
   {{/hasExpress}}
   {{#hasPython}}
   ```bash
   python app.py
   # or
   flask run
   ```
   {{/hasPython}}

5. **Open your browser**
   {{#hasWebApp}}
   Navigate to [http://localhost:3000](http://localhost:3000)
   {{/hasWebApp}}
   {{#hasApi}}
   API available at [http://localhost:3000](http://localhost:3000)
   API documentation at [http://localhost:3000/api/docs](http://localhost:3000/api/docs)
   {{/hasApi}}

## Project Structure

```
{{projectName}}/
â”œâ”€â”€ src/                    # Source code
{{#hasWebApp}}
â”‚   â”œâ”€â”€ components/         # Reusable components
â”‚   â”œâ”€â”€ pages/             # Page components
â”‚   â”œâ”€â”€ hooks/             # Custom hooks
â”‚   â”œâ”€â”€ utils/             # Utility functions
â”‚   â””â”€â”€ styles/            # CSS/SCSS files
{{/hasWebApp}}
{{#hasApi}}
â”‚   â”œâ”€â”€ routes/            # API routes
â”‚   â”œâ”€â”€ models/            # Data models
â”‚   â”œâ”€â”€ middleware/        # Express middleware
â”‚   â”œâ”€â”€ controllers/       # Route controllers
â”‚   â””â”€â”€ utils/             # Utility functions
{{/hasApi}}
â”œâ”€â”€ public/                # Static assets
â”œâ”€â”€ docs/                  # Documentation
â”œâ”€â”€ tests/                 # Test files
â”œâ”€â”€ config/                # Configuration files
{{#hasDocker}}
â”œâ”€â”€ docker/                # Docker configuration
â”œâ”€â”€ Dockerfile             # Docker image definition
â”œâ”€â”€ docker-compose.yml     # Multi-container setup
{{/hasDocker}}
â”œâ”€â”€ .env.example           # Environment variables template
â”œâ”€â”€ package.json           # Dependencies and scripts
â””â”€â”€ README.md              # This file
```

## Development

### Available Scripts

{{#hasNodeJs}}
- `npm start` - Start development server
- `npm run build` - Build for production
- `npm test` - Run test suite
- `npm run test:watch` - Run tests in watch mode
- `npm run test:coverage` - Generate coverage report
- `npm run lint` - Run linter
- `npm run lint:fix` - Fix linting issues
{{/hasNodeJs}}

### Environment Variables

Copy `.env.example` to `.env` and configure the following variables:

```env
# Application
NODE_ENV=development
PORT=3000
APP_NAME={{projectName}}

{{#hasDatabase}}
# Database
DATABASE_URL=your_database_url
{{/hasDatabase}}

{{#hasAuth}}
# Authentication
JWT_SECRET=your_jwt_secret
{{/hasAuth}}

{{#hasApiIntegration}}
# External APIs
API_KEY=your_api_key
API_BASE_URL=https://api.example.com
{{/hasApiIntegration}}
```

### Code Style and Linting

This project uses:
- **ESLint** for code linting
- **Prettier** for code formatting
- **Husky** for git hooks (pre-commit linting)

### Testing

{{#hasTesting}}
- **Unit Tests**: `npm test`
- **Integration Tests**: `npm run test:integration`
- **E2E Tests**: `npm run test:e2e`
- **Coverage**: `npm run test:coverage`
{{/hasTesting}}
{{^hasTesting}}
Run tests with:
```bash
npm test
```
{{/hasTesting}}

## Deployment

### Production Build

{{#hasNodeJs}}
```bash
npm run build
npm start
```
{{/hasNodeJs}}

### Docker Deployment

{{#hasDocker}}
```bash
# Build image
docker build -t {{projectName}} .

# Run container
docker run -p 3000:3000 {{projectName}}

# Using Docker Compose
docker-compose up
```
{{/hasDocker}}

### Platform-Specific Deployment

{{#hasVercel}}
#### Vercel
```bash
npx vercel --prod
```
{{/hasVercel}}

{{#hasNetlify}}
#### Netlify
```bash
npm run build
# Upload dist/ folder to Netlify
```
{{/hasNetlify}}

{{#hasHeroku}}
#### Heroku
```bash
heroku create {{projectName}}
git push heroku main
```
{{/hasHeroku}}

## API Documentation

{{#hasApi}}
API documentation is available at `/api/docs` when running the development server.

### Key Endpoints

- `GET /health` - Health check
- `POST /api/auth/login` - User authentication
- `GET /api/users` - Get users
- `POST /api/users` - Create user

Full API specification follows OpenAPI 3.0 standards.
{{/hasApi}}

## Configuration

### Constraints and Requirements

{{#constraints}}
- {{.}}
{{/constraints}}
{{^constraints}}
- Follow semantic versioning
- Maintain backwards compatibility
- Ensure responsive design
- Implement proper error handling
- Include comprehensive logging
{{/constraints}}

## Troubleshooting

### Common Issues

1. **Port already in use**
   ```bash
   # Kill process on port 3000
   npx kill-port 3000
   ```

2. **Node modules issues**
   ```bash
   rm -rf node_modules package-lock.json
   npm install
   ```

3. **Environment variables not loading**
   - Ensure `.env` file exists in project root
   - Check variable names match `.env.example`
   - Restart development server

### Getting Help

- Check the [documentation](./docs/)
- Review [issues](./docs/troubleshooting.md)
- Contact the development team

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Development Guidelines

- Follow the existing code style
- Write tests for new features
- Update documentation as needed
- Ensure all tests pass before submitting PR

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Generated with [Qoder Universal Prompt Generator](https://github.com/qoder/prompt-generator)
- Built for **{{targetAudience}}**
- Optimized for **{{deploymentTarget}}** deployment

---

**Generated on:** {{date.iso}}  
**Category:** {{category}}  
**Version:** 1.0.0