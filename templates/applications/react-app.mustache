{{!-- @title: React Application Template --}}
{{!-- @description: Modern React application with hooks and TypeScript --}}
{{!-- @category: web-app --}}
{{!-- @subcategory: react --}}
{{!-- @techStack: React, TypeScript --}}
{{!-- @outputPath: src/App.tsx --}}

import React, { useState, useEffect } from 'react';
{{#hasRouting}}
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
{{/hasRouting}}
{{#hasStateManagement}}
import { Provider } from 'react-redux';
import { store } from './store/store';
{{/hasStateManagement}}
import './App.css';

{{#hasRouting}}
// Components
const Home = () => (
  <div>
    <h1>Welcome to {{projectName}}</h1>
    <p>Target Audience: {{targetAudience}}</p>
    <p>Built with: {{#techStack}}{{.}} {{/techStack}}</p>
  </div>
);

const About = () => (
  <div>
    <h1>About {{projectName}}</h1>
    <p>This application was generated using Qoder's Universal Prompt Generator.</p>
    {{#constraints}}
    <p>Constraint: {{.}}</p>
    {{/constraints}}
  </div>
);

const Dashboard = () => {
  const [data, setData] = useState{{#hasTypeScript}}<any[]>{{/hasTypeScript}}([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate API call
    const fetchData = async () => {
      try {
        setLoading(true);
        // Replace with actual API endpoint
        const response = await fetch('/api/data');
        const result = await response.json();
        setData(result);
      } catch (error) {
        console.error('Failed to fetch data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>Dashboard</h1>
      <div className="data-grid">
        {data.length > 0 ? (
          data.map((item{{#hasTypeScript}}: any{{/hasTypeScript}}, index{{#hasTypeScript}}: number{{/hasTypeScript}}) => (
            <div key={index} className="data-item">
              {JSON.stringify(item)}
            </div>
          ))
        ) : (
          <p>No data available</p>
        )}
      </div>
    </div>
  );
};
{{/hasRouting}}

const App{{#hasTypeScript}}: React.FC{{/hasTypeScript}} = () => {
  {{^hasRouting}}
  const [count, setCount] = useState(0);
  const [message, setMessage] = useState('Welcome to {{projectName}}');

  useEffect(() => {
    document.title = '{{projectName}}';
  }, []);

  const handleIncrement = () => {
    setCount(prev => prev + 1);
  };

  const handleReset = () => {
    setCount(0);
    setMessage('Counter reset!');
  };
  {{/hasRouting}}

  return (
    {{#hasStateManagement}}
    <Provider store={store}>
    {{/hasStateManagement}}
      <div className="App">
        {{#hasRouting}}
        <Router>
          <nav className="navbar">
            <div className="nav-brand">
              <Link to="/">{{projectName}}</Link>
            </div>
            <div className="nav-links">
              <Link to="/">Home</Link>
              <Link to="/about">About</Link>
              <Link to="/dashboard">Dashboard</Link>
            </div>
          </nav>

          <main className="main-content">
            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/about" element={<About />} />
              <Route path="/dashboard" element={<Dashboard />} />
            </Routes>
          </main>
        </Router>
        {{/hasRouting}}
        {{^hasRouting}}
        <header className="App-header">
          <h1>{message}</h1>
          <p>Target Audience: {{targetAudience}}</p>
          
          <div className="counter-section">
            <p>Count: {count}</p>
            <div className="button-group">
              <button onClick={handleIncrement} className="btn btn-primary">
                Increment
              </button>
              <button onClick={handleReset} className="btn btn-secondary">
                Reset
              </button>
            </div>
          </div>

          <div className="tech-stack">
            <h3>Tech Stack:</h3>
            <ul>
              {{#techStack}}
              <li>{{.}}</li>
              {{/techStack}}
            </ul>
          </div>

          {{#constraints}}
          <div className="constraints">
            <h3>Project Constraints:</h3>
            <ul>
              {{#.}}
              <li>{{.}}</li>
              {{/.}}
            </ul>
          </div>
          {{/constraints}}

          <div className="deployment-info">
            <p><strong>Deployment Target:</strong> {{deploymentTarget}}</p>
            <p><strong>Generated:</strong> {{date.formatted}}</p>
          </div>
        </header>
        {{/hasRouting}}

        <footer className="App-footer">
          <p>Built with Qoder Universal Prompt Generator</p>
          <p>Category: {{category}} | Generated: {{date.iso}}</p>
        </footer>
      </div>
    {{#hasStateManagement}}
    </Provider>
    {{/hasStateManagement}}
  );
};

export default App;